DROP TABLE IF EXISTS M_MESSAGE, M_USER, M_USER_IN_CHAT, M_CHAT, M_USER_ACTION, M_USER_PROFILE, M_USER_ROLE, M_USER_STATUS, M_LOG CASCADE;

DROP FUNCTION IF EXISTS register, login,get_messages_from_chat, get_messages_for_user_in_chat, get_chats_for_user, get_last_message_in_chat, register_action, vote_on_user,
	add_message_action, add_chat_action, leave_chat_action, join_chat_action;
CREATE TABLE M_USER
(
    ID    serial PRIMARY KEY,
    PASSWORD        TEXT NOT NULL,
	LOGIN        VARCHAR(20) NOT NULL UNIQUE
);

CREATE INDEX ON M_USER USING HASH(ID);

CREATE TABLE M_CHAT
(
    ID    serial PRIMARY KEY,
    NAME VARCHAR(20) NOT NULL
);
CREATE INDEX ON M_CHAT USING HASH(ID);

CREATE TABLE M_MESSAGE
(
    ID    serial PRIMARY KEY,
    SENDER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	CHAT_ID     INTEGER REFERENCES M_CHAT ON DELETE CASCADE NOT NULL,
	DATA TEXT NOT NULL
);

CREATE INDEX ON M_MESSAGE USING HASH(ID);


CREATE TABLE M_USER_IN_CHAT
(
    USER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	CHAT_ID INTEGER REFERENCES M_CHAT ON DELETE CASCADE NOT NULL,
	ROLE  VARCHAR(20) NOT NULL DEFAULT 'REGULAR'
);
CREATE INDEX ON M_USER_IN_CHAT USING HASH(USER_ID);

CREATE TABLE M_USER_STATUS
(
	ID    serial PRIMARY KEY,
    USER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	NAME  VARCHAR(20) NOT NULL,
	DESCRIPTION VARCHAR(20)
);
ALTER TABLE M_USER_STATUS ADD CONSTRAINT UniqueStatusForUser UNIQUE(USER_ID, NAME);

CREATE INDEX ON M_USER_STATUS USING HASH(USER_ID);

CREATE TABLE M_USER_PROFILE
(
    USER_ID   INTEGER unique REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	RATING int default 0
);
CREATE INDEX ON M_USER_PROFILE USING HASH(USER_ID);

CREATE TABLE M_USER_ACTION
(
	ID    serial PRIMARY KEY,
    USER_ID   INTEGER REFERENCES M_USER ON DELETE CASCADE NOT NULL,
	NAME VARCHAR(20) NOT NULL,
	DESCRIPTION VARCHAR(20),
	STATUS	VARCHAR(20) NOT NULL,
	TIME TIMESTAMP
);
CREATE INDEX ON M_USER_ACTION USING HASH(USER_ID);

CREATE TABLE M_LOG
(
	DATA VARCHAR(20)
);


CREATE OR REPLACE FUNCTION register(_login varchar(20), _password varchar(20))  
returns int
language plpgsql  
as  
$$  
DECLARE _id int;
BEGIN  
INSERT INTO M_USER (LOGIN,PASSWORD)
VALUES(_login, _password)
RETURNING ID INTO _id;
RETURN _id;
END;  
$$;  

CREATE OR REPLACE FUNCTION login(_login varchar(20), _password varchar(20))  
returns int
language plpgsql  
as  
$$  
DECLARE _id int = NULL;
BEGIN  
SELECT ID INTO _id from M_USER WHERE (LOGIN = _login and PASSWORD = _password);
IF (_id IS NULL) THEN
    RAISE INFO 'No such user';
END IF;
INSERT INTO M_USER_STATUS(USER_ID,NAME) VALUES(_id,'ONLINE');
RETURN _id;
END;  
$$;  

CREATE OR REPLACE PROCEDURE logout(_login varchar(20), _password varchar(20))  
language plpgsql  
as  
$$  
DECLARE _id int = NULL;
BEGIN  
SELECT ID INTO _id from M_USER WHERE (LOGIN = _login and PASSWORD = _password);
DELETE FROM M_USER_STATUS WHERE  (M_USER_STATUS.USER_ID = _id and M_USER_STATUS.NAME = 'ONLINE');
END;  
$$;

CREATE OR REPLACE PROCEDURE vote_on_user(_user_id int, positive bool default true)  
language plpgsql  
as  
$$  
BEGIN  
UPDATE M_USER_PROFILE SET RATING = CASE WHEN (positive) then RATING+1 else RATING-1 end 
WHERE M_USER_PROFILE.USER_ID = _user_id;
END;  
$$;

CREATE OR REPLACE FUNCTION GET_MESSAGES_FOR_USER_IN_CHAT(_user_id int, _chat int)  
returns TABLE(ID int, SENDER_ID int, SENDER VARCHAR(20), MESSAGE TEXT)  
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_MESSAGE.ID,SENDER.ID,SENDER.LOGIN, M_MESSAGE.DATA
	FROM M_USER CUR_USER
	JOIN M_MESSAGE ON (M_MESSAGE.CHAT_ID = _chat)-- AND M_MESSAGE.SENDER_ID <> CUR_USER.ID)
	JOIN M_USER SENDER ON M_MESSAGE.SENDER_ID = SENDER.ID
	WHERE CUR_USER.ID = _user_id
	ORDER BY M_MESSAGE.ID;
	
END;  
$$;  


CREATE OR REPLACE FUNCTION GET_MESSAGES_FROM_CHAT(_chat int)  
returns TABLE(ID int, SENDER_ID int, SENDER VARCHAR(20), MESSAGE TEXT)  
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_MESSAGE.ID,SENDER.ID,SENDER.LOGIN, M_MESSAGE.DATA
	FROM M_USER CUR_USER
	JOIN M_MESSAGE ON (M_MESSAGE.CHAT_ID = _chat)-- AND M_MESSAGE.SENDER_ID <> CUR_USER.ID)
	JOIN M_USER SENDER ON M_MESSAGE.SENDER_ID = SENDER.ID
	WHERE CUR_USER.ID = _user_id
	ORDER BY M_MESSAGE.ID;
	
END;  
$$;  


CREATE OR REPLACE FUNCTION get_chats_for_user(_user_id int)  
RETURNS SETOF M_CHAT
language plpgsql  
as  
$$   
BEGIN  
   RETURN QUERY
   SELECT M_CHAT.ID, M_CHAT.NAME
   FROM M_USER
	JOIN M_USER_IN_CHAT ON M_USER_IN_CHAT.USER_ID = M_USER.ID 
	JOIN M_CHAT ON M_CHAT.ID = M_USER_IN_CHAT.CHAT_ID
	WHERE M_USER.ID = _user_id;
END;  
$$;  


CREATE OR REPLACE FUNCTION register_action()
RETURNS trigger AS 
$$   
BEGIN  
   INSERT INTO M_USER_ACTION(USER_ID, NAME, STATUS, TIME)
	VALUES(NEW.ID, 'user registered', 'OK', NOW()::TIMESTAMP);
	INSERT INTO M_USER_PROFILE(USER_ID) VALUES(NEW.ID);
	RETURN NEW;
END;  
$$ language plpgsql ; 

CREATE OR REPLACE FUNCTION add_message_action()
RETURNS trigger AS 
$$   
BEGIN  
   INSERT INTO M_USER_ACTION(USER_ID, NAME, STATUS, TIME, DESCRIPTION)
	VALUES(NEW.SENDER_ID, 'message sent', 'OK', NOW()::TIMESTAMP, 'message id: '||NEW.ID);
	RETURN NEW;
END;  
$$ language plpgsql ;  

CREATE OR REPLACE FUNCTION add_chat_action()
RETURNS trigger AS 
$$   
BEGIN  
   INSERT INTO M_USER_ACTION(USER_ID, NAME, STATUS, TIME, DESCRIPTION)
	VALUES(NEW.USER_ID, 'chat create', 'OK', NOW()::TIMESTAMP, 'chat id: ' || NEW.CHAT_ID);
	RETURN NEW;
END;  
$$ language plpgsql ;  


CREATE OR REPLACE FUNCTION join_chat_action()
RETURNS trigger AS 
$$   
BEGIN  
   INSERT INTO M_USER_ACTION(USER_ID, NAME, STATUS, TIME, DESCRIPTION)
	VALUES(NEW.USER_ID, 'join chat', 'OK', NOW()::TIMESTAMP, 'chat id: ' || NEW.CHAT_ID);
	RETURN NEW;
END;  
$$ language plpgsql ; 


CREATE OR REPLACE FUNCTION leave_chat_action()
RETURNS trigger AS 
$$   
BEGIN  
   INSERT INTO M_USER_ACTION(USER_ID, NAME, STATUS, TIME, DESCRIPTION)
   SELECT OLD.USER_ID, CASE WHEN (OLD.ROLE='CREATOR') then 'leave and delete' else 'leave chat' end, 'OK', NOW()::TIMESTAMP, 'chat id: ' || OLD.CHAT_ID
   WHERE EXISTS (SELECT * FROM M_USER 
                   WHERE M_USER.ID = OLD.USER_ID);
	RETURN OLD;
END;  
$$ language plpgsql ; 

CREATE TRIGGER UserRegisteredInfo AFTER INSERT ON M_USER
FOR EACH ROW 
EXECUTE PROCEDURE register_action();

CREATE TRIGGER UserSendMessageInfo AFTER INSERT ON M_MESSAGE
FOR EACH ROW EXECUTE PROCEDURE add_message_action();

CREATE TRIGGER ChatCreateInfo AFTER INSERT ON M_USER_IN_CHAT
FOR EACH ROW 
WHEN (NEW.ROLE = 'CREATOR')
EXECUTE PROCEDURE add_chat_action();

CREATE TRIGGER ChatJoinInfo AFTER INSERT ON M_USER_IN_CHAT
FOR EACH ROW 
EXECUTE PROCEDURE join_chat_action();

CREATE TRIGGER ChatLeaveInfo AFTER DELETE ON M_USER_IN_CHAT
FOR EACH ROW 
EXECUTE PROCEDURE leave_chat_action();


SELECT register('aboba','qwerty');
SELECT register('sanya','abcdef');
SELECT register('kostya','vskdvb');

CALL vote_on_user(2, false);
CALL vote_on_user(1);

SELECT login('kostya','vskdvb');

INSERT INTO M_CHAT (NAME)
VALUES('chatic');

INSERT INTO M_USER_IN_CHAT (USER_ID, CHAT_ID, ROLE)
VALUES(1,1, 'CREATOR'), (2,1, 'REGULAR'), (3,1, 'REGULAR');

INSERT INTO M_MESSAGE(SENDER_ID, CHAT_ID, DATA)
VALUES(2,1,'здарова лошпедусы');

INSERT INTO M_MESSAGE(SENDER_ID, CHAT_ID, DATA)
VALUES(3,1,'и тебе привет');

INSERT INTO M_MESSAGE(SENDER_ID, CHAT_ID, DATA)
VALUES(1,1,'aboba...');

DELETE FROM M_USER WHERE M_USER.ID=2;


SELECT CHAT.NAME,SENDER,MESSAGE
FROM M_USER
CROSS JOIN LATERAL GET_CHATS_FOR_USER(M_USER.ID) AS CHAT
CROSS JOIN LATERAL GET_MESSAGES_FOR_USER_IN_CHAT(M_USER.ID, CHAT.ID)
WHERE M_USER.ID = (select id from M_USER where M_USER.LOGIN='aboba');

--DELETE FROM M_CHAT *;

--select * from GET_MESSAGES_FOR_USER_IN_CHAT('aboba', select M_CHAT.ID from GET_CHATS_FOR_USER('aboba'););

